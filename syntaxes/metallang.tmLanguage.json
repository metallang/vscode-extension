{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Metal",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#function-calls"
        },
        {
            "include": "#function-definitions"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#type-annotations"
        },
        {
            "include": "#structs-and-abstracts"
        },
        {
            "include": "#macros"
        },
        {
            "include": "#impls"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.metallang",
                    "match": "\\b(if|while|for|return|def|macro|import|let|const|struct|enum|abstract|match|impl|pub)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.metallang",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.metallang",
                    "match": "\\\\."
                }
            ]
        },
        "chars": {
            "name": "char.quoted.single.metallang",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape.metallang",
                    "match": "\\\\."
                }
            ]
        },
        "function-calls": {
            "patterns": [
                {
                    "name": "entity.name.function.call.metallang",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*\\((?=[^)]*\\))"
                },
                {
                    "name": "entity.name.function.call.bang.metallang",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*!\\s*(\\(|\\{)"
                }
            ]
        },
        "function-definitions": {
            "patterns": [
                {
                    "name": "entity.name.function.definition.metallang",
                    "match": "\\bdef\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s*\\((?:[a-zA-Z_][a-zA-Z0-9_]*\\s*:\\s*[a-zA-Z_][a-zA-Z0-9_]*(?:,\\s*)?)*\\)\\s*:\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\{|;)",
                    "captures": {
                        "1": { "name": "keyword.control.def.metallang" },
                        "2": { "name": "entity.name.function.metallang" },
                        "3": { "name": "variable.parameter.metallang" },
                        "4": { "name": "storage.type.return-type.metallang" }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.assignment.metallang",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*:\\s*[a-zA-Z_][a-zA-Z0-9_]*",
                    "captures": {
                        "1": { "name": "variable.name.metallang" },
                        "2": { "name": "storage.type.variable-type.metallang" }
                    }
                }
            ]
        },
        "type-annotations": {
            "patterns": [
                {
                    "name": "storage.type.variable-type.metallang",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*:\\s*)"
                },
                {
                    "name": "storage.type.return-type.metallang",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*:\\s*\\()"
                }
            ]
        },
        "structs-and-abstracts": {
            "patterns": [
                {
                    "name": "keyword.control.abstract.metallang",
                    "match": "\\babstract\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "keyword.control.struct.metallang",
                    "match": "\\bstruct\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "macros": {
            "patterns": [
                {
                    "name": "keyword.control.macro.metallang",
                    "match": "\\bmacro\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "impls": {
            "patterns": [
                {
                    "name": "keyword.control.impl.metallang",
                    "match": "\\bimpl\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s+for\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
		"type": {
			"patterns": [
				{
					"name": "meta.type.annotation",
					"match": ": ?[a-zA-Z0-9]+"
				}
			]
		}
    },
    "scopeName": "source.mt"
}
